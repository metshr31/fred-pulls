name: FRED Bulk Pull (Test)

on:
  workflow_dispatch:        # manual "Run workflow" button
  # schedule:
  #   - cron: "0 12 * * *"  # optional: runs daily at 12:00 UTC

permissions:
  contents: read

concurrency:
  group: fred-bulk-test
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      PYTHONFAULTHANDLER: "1"
      PYTHONUNBUFFERED: "1"
      MPLBACKEND: Agg
      SAVE_PATH: outputs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # fallbacks to ensure Excel + statsmodels work
            pip install fredapi pandas numpy openpyxl xlsxwriter scipy scikit-learn matplotlib statsmodels
          fi

      - name: Prepare outputs dir
        run: |
          set -euo pipefail
          rm -rf outputs
          mkdir -p outputs

      - name: Show repo layout (debug)
        run: |
          set -euo pipefail
          echo "PWD: $(pwd)"
          ls -lah
          echo "Python files:"
          find . -maxdepth 2 -type f -name "*.py" -print

      - name: Verify test script exists
        run: |
          set -euo pipefail
          test -f pull_fred_series_bulk_split_pivot_adaptive_test.py || { echo "ERROR: pull_fred_series_bulk_split_pivot_adaptive_test.py not found"; exit 1; }

      - name: Run bulk pull (test)
        env:
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        run: |
          set -euo pipefail
          echo "Running test script with SAVE_PATH=${SAVE_PATH}"
          python pull_fred_series_bulk_split_pivot_adaptive_test.py
          echo "After run, tree:"
          ls -lah .

      - name: Collect output into outputs/
        run: |
          set -euo pipefail
          EXPECT="fred_series_2019base.xlsx"
          if [ -f "$EXPECT" ]; then
            mv "$EXPECT" "outputs/$EXPECT"
          fi
          # also pick up any additional .xlsx/.png you might emit later
          find . -maxdepth 1 -type f \( -name '*.xlsx' -o -name '*.png' \) -not -path './outputs/*' -exec cp {} outputs/ \;
          echo "Listing outputs/"
          ls -lah outputs || true

      - name: Upload outputs (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fred-bulk-test-output
          path: outputs/**
          if-no-files-found: warn

      - name: Debug dump on failure
        if: failure()
        run: |
          echo "==== DEBUG DUMP BEGIN ===="
          find . -maxdepth 3 -type f -printf "%p\t%k KB\n" | sort || true
          echo "--- outputs/ ---"
          ls -lah outputs || true
          echo "Python & libs:"
          python -c "import sys; print(sys.version)"
          python - <<'PY'
import importlib, pkgutil
for m in ["pandas","numpy","openpyxl","xlsxwriter","scipy","statsmodels","fredapi","matplotlib"]:
    try:
        mod = importlib.import_module(m)
        ver = getattr(mod, "__version__", "n/a")
        print(m, ver)
    except Exception as e:
        print(m, "NOT INSTALLED:", e)
PY
          echo "==== DEBUG DUMP END ===="
